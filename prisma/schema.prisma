generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Invoice {
  id                 String       @id @default(uuid())
  billFromId         String       @unique
  billFrom           Location     @relation("BillFrom", fields: [billFromId], references: [id], onDelete: Cascade)
  billToId           String       @unique
  billTo             Location     @relation("BillTo", fields: [billToId], references: [id], onDelete: Cascade)
  invoiceDate        DateTime
  paymentTerms       PaymentTerms
  projectDescription String       @db.Text
  items              Item[]
  status             Status
}

model Location {
  id           String  @id @default(uuid())
  name         String?
  email        String?
  streetAdress String
  city         String
  postCode     String
  country      String

  invoiceFrom Invoice? @relation("BillFrom")
  invoiceTo   Invoice? @relation("BillTo")
}

model Item {
  id        String  @id @default(uuid())
  name      String
  quantity  Int
  price     Float
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

enum PaymentTerms {
  NET_1_DAY
  NET_7_DAYS
  NET_14_DAYS
  NET_30_DAY
}

enum Status {
  PAID
  PENDING
  DRAFT
}
